{"meta":{"title":"vernon's blog","subtitle":"","description":"vernon's blog.","author":"John Doe","url":"https://froze2049.github.io","root":"/"},"pages":[{"title":"","date":"2022-06-08T09:27:27.345Z","updated":"2022-06-08T09:27:27.345Z","comments":true,"path":"about/index.html","permalink":"https://froze2049.github.io/about/index.html","excerpt":"","text":"test"},{"title":"所有分类","date":"2022-06-09T13:36:47.746Z","updated":"2022-06-09T13:36:47.746Z","comments":true,"path":"categories/index.html","permalink":"https://froze2049.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-06-09T13:37:13.400Z","updated":"2022-06-09T13:37:13.400Z","comments":true,"path":"tags/index.html","permalink":"https://froze2049.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"编译原理期末笔记","slug":"编译原理期末笔记","date":"2022-06-11T07:18:04.000Z","updated":"2022-06-13T05:59:43.344Z","comments":true,"path":"posts/53f/","link":"","permalink":"https://froze2049.github.io/posts/53f/","excerpt":"使用的教材是高等教育出版社的《编译原理（第三版）》陈易云 张昱编著","text":"使用的教材是高等教育出版社的《编译原理（第三版）》陈易云 张昱编著 第一章：绪论编译程序概念 翻译程序：完成从一种语言到另一种语言的保语义变换的软件 源语言：变换前的语言 目标语言：变换后的语言 编译程序是一种翻译程序，将源程序的语句一次全部翻译成机器语言程序（先翻译成汇编），而后再执行机器语言程序(只需翻译一次) 解释程序：将源程序的语句翻译一句执行一句(每次执行都要翻译)，不会生成目标程序。 画出编译程序的总体结构图，简述个部分的主要功能 一个典型的编译程序通常包含8个组成部分，它们是词法分析程序、语法分析程序、语义分析程序、中间代码生成程序、中间代码优化程序、目标代码生成程序、符号表管理程序和错误处理程序。其各部分的主要功能简述如下。 词法分析程序：输人源程序，拼单词、检查单词和分析单词，输出单词的机内表达形式。 语法分析程序：检查源程序中存在的形式语法错误，输出错误处理信息。 语义分析程序：进行语义检查和分析语义信息，并把分析的结果保存到各类语义信息表中。 中间代码生成程序：按照语义规则，将语法分析程序分析出的语法单位转换成一定形式的中间语言代码，如三元式或四元式。 中间代码优化程序：为了产生高质量的目标代码，对中间代码进行等价变换处理。 目标代码生成程序：将优化后的中间代码程序转换成目标代码程序。 符号表管理程序：负责建立、填写和查找等一系列表格工作。 错误处理程序：处理和校正源程序中存在的词法、语法和语义错误。 第二章：词法分析有限自动机概念 不确定的有限自动机（NFA）： （1）有限的状态集合S （2）输入符号字母表的集合∑ （3）状态转换函数move：S×(∑∪{ε})→P(S)的部分映射 （4）状态S0是唯一的开始状态 （5）终止状态集合F，F⊆S 确定的有限自动机（DFA）: （1）有限的状态集合S （2）输入符号字母表的集合∑ （3）状态转换函数move：S×∑→S的单值部分映射 （4）状态S0是唯一的开始状态 （5）终止状态集合F，F⊆S 正规式构造NFA NFA到DFA的转化参考：https://blog.csdn.net/lilongsy/article/details/82465395 例题 构造正规式相应的DFA：1(0|1)*101按照以下三步：（1）由正规表达式构造转换系统（NFA）（2）由转换系统（NFA）构造确定的有穷自动机DFA（3）DFA的最小化 (0|1)*可以化为 参考解题过程：https://wenku.baidu.com/view/1076bb15c281e53a5802ff35.html DFA的最小化（化简）：https://www.bilibili.com/video/BV1J64y1k7nk?p=5 第三章：语法分析上下文无关文法概念 若一个形式文法G &#x3D; (V, Σ, P, S) 的产生式规则都取如下的形式：A -&gt; α，则谓之。其中 A∈V ，α∈(V∪Σ)* 。上下文无关文法取名为“上下文无关”的原因就是因为字符 A 总可以被字符串 α 自由替换，而无需考虑字符 A 出现的上下文。 上下文无关语法G是一个四元组（VT，VN，S，P），其中包括 VT：终结符号的一组非空有限集合 VN：非终结符号的一组非空有限集合，且VT∩VN&#x3D;∅ S：一个非终结符，称为开始符号 P：产生式的有限集合，每个产生式的形式是A→α，A∈VN，α∈(VT∪VN)*。 例题 考虑文法 12S -&gt; (L)|aL -&gt; L,S|S (a) 建立句子(a,(a,a))和(a,((a,a),(a,a)))的分析树(b) 为(a)的两个句子构造最左推导(c) 为(a)的两个句子构造最右推导(d) 这个文法产生的语言是什么 描述的语言：括号匹配的串_串中的各项由“,”隔开，项可以是括号匹配的子串或a 对于文法G(E): 123E = T|E+T T = F|T*F F = (E)|i 1）写出句型(T*F+i)的最左推导并画出语法树。 2）写出上述句型的短语，直接短语和句柄 短语有T*F+i, T*F, i，直接短语的为 T*F、i，句柄是T*F. 左递归 在二元表达式的语法规则中，如果产生式的第一个元素是它自身，那么程序就会无限地递归下去，这种情况就叫做左递归。 存在递归产生式 1A → Aα|β 消除直接左递归可以写为 12A → βA’A’ → αA’|ε 例题消除下面文法的左递归 1231) E → E+T|T2) T → T*F|F3) F → (E)|id 结果 123451) E → TE’ E’ → +TE’|ε2) T → FT’ T’ → *FT’|ε3) F → (E)|id 自上而下分析LL(1)求FIRST集和FOLLOW集： 求SELECT集： (1)式子E的右边第一个T是非终结符，则SELECT(E)&#x3D;FIRST(T) (2)E’的右边第一个+是终结符，则加入SELECT(E’)中 (3)E’的右边第一个是ε符号，则将FOLLOW(E’)加入SELECT(E’)中 自下而上分析LR(0) SLR(1)","categories":[{"name":"计算机学科笔记","slug":"计算机学科笔记","permalink":"https://froze2049.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://froze2049.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"}]},{"title":"简单记录配置主题的过程","slug":"简单记录配置主题的过程","date":"2022-06-07T14:07:01.000Z","updated":"2022-06-10T07:31:46.576Z","comments":true,"path":"posts/1166/","link":"","permalink":"https://froze2049.github.io/posts/1166/","excerpt":"记录一下配置主题的过程和走的弯路","text":"记录一下配置主题的过程和走的弯路 使用npm安装插件需要注意的地方npm的包安装分为两种 本地安装（local） 1npm install xxx 安装到命令行所在目录的node_module目录 全局安装（global） 1npm install xxx -g 安装到 \\AppData\\Roaming\\npm\\node_modules（默认目录） 由于本人过于小白，打开命令行就直接输入命令npm install xxx，导致插件都安装在了打开命令行时的默认路径下，hexo generata时无法调用插件，期间npm多次报错 1251 vulnerabilities (3 low, 17 moderate, 28 high, 3 critical)To address issues that do not require attention, run: 搜索出来的解决方法也都无用，这么蠢的错误毕竟也没有人会犯。折腾了好久才反应过来。 总结，安装插件时请在自己博客根目录内打开命令行。 创建配置文件在博客文件夹的根目录创建文件_config.volantis.yml 配置封面在_config.volantis.yml中 123cover: background: https://s1.ax1x.com/2022/06/08/Xr33lt.jpg title: &quot;veron&#x27;s blog&quot; 配置背景图片不随文章滚动在_config.volantis.yml中 position设置为fixed 123456789plugins: parallax: enable: true position: fixed # cover: sticky on the cover. fixed: Fixed as background for the site. shuffle: true # shuffle playlist duration: 10000 # Duration (ms) fade: 500 # fade duration (ms) (Not more than 1500) images: - https://s1.ax1x.com/2022/06/08/Xr33lt.jpg 注意，开启parallax之后，只需要在images中配置图片就好了，cover中的background不用配置 123cover: background: title: &quot;veron&#x27;s blog&quot; 配置文章内的版权声明组件在_config.yml中 12345# URL## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;url: https://froze2049.github.io/permalink: posts/:abbrlink/permalink_defaults:","categories":[{"name":"博客","slug":"博客","permalink":"https://froze2049.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Volantis","slug":"Volantis","permalink":"https://froze2049.github.io/tags/Volantis/"},{"name":"Hexo","slug":"Hexo","permalink":"https://froze2049.github.io/tags/Hexo/"}]}],"categories":[{"name":"计算机学科笔记","slug":"计算机学科笔记","permalink":"https://froze2049.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E7%AC%94%E8%AE%B0/"},{"name":"博客","slug":"博客","permalink":"https://froze2049.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"https://froze2049.github.io/tags/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"},{"name":"Volantis","slug":"Volantis","permalink":"https://froze2049.github.io/tags/Volantis/"},{"name":"Hexo","slug":"Hexo","permalink":"https://froze2049.github.io/tags/Hexo/"}]}